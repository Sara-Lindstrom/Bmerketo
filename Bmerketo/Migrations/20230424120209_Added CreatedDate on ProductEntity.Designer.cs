// <auto-generated />
using System;
using Bmerketo.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bmerketo.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230424120209_Added CreatedDate on ProductEntity")]
    partial class AddedCreatedDateonProductEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bmerketo.Models.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("Category")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<Guid>("ProductImageDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte?>("Review")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ProductImageDataId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Bmerketo.Models.Entities.ProductImageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageDataOne")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("ImageDatafour")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("ImageDatathree")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("ImageDatatwo")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("ImageFourMimeType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImageOneMimeType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImageTwoMimeType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImagethreeMimeType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrimaryImageData")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("PrimaryImageMimeType")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductImageEntity");
                });

            modelBuilder.Entity("Bmerketo.Models.Entities.ProductEntity", b =>
                {
                    b.HasOne("Bmerketo.Models.Entities.ProductImageEntity", "ProductImageData")
                        .WithMany()
                        .HasForeignKey("ProductImageDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductImageData");
                });
#pragma warning restore 612, 618
        }
    }
}
